global:
  publicDomainName: "localhost"
  publicPort: 443

  # Lifetimes of internal certificates
  certDuration: 8760h  # 1 year
  caCertDuration: 87600h  # 10 years

  # Priority class of IssAssist components.
  priorityClass: ~

  # Ingress
  ingress:
    ingressClass: nginx

    # TLS certificate settings
    tls:
      # Issuer type. Can be:
      # - cluster (uses cert-manager.io/cluster-issuer annotation)
      # - issuer (uses cert-manager.io/issuer annotation)
      # - disabled (disables public certificate usage and use a built-in
      #             self-signed certificate instead)
      issuerType: "disabled"
      # Issuer or ClusterIssuer name.
      issuer: ""

api:
  enabled: true
  image: 'ghcr.io/isstech/issassist-api:1.0.0-beta.6'

  mail:
    smtpHost: ""
    smtpPort: 25
    smtpTLS: true
    smtpUsername: ""
    smtpPassword: ""
    fromEmailAddress: ""
    fromName: ""

  postgres:
    storageClass: ~
    volumeSize: "10Gi"

  valkey:
    storageClass: ~
    volumeSize: "1Gi"

webGUI:
  enabled: true
  replicas: 3
  image: 'ghcr.io/isstech/issassist-webgui:1.0.0-rc.2'

tsmAgent:
  enabled: true
  replicas: 3
  image: 'ghcr.io/isstech/issassist-tsm-agent:1.0.0-rc.13'

  tsmClientImage:
    buildSchedule: "0 0 * * 1"  # Every Monday, 00:00

  restoreTests:
    # Storage class for restore test volumes.
    # Recommendation: prioritize capacity over random I/O performance.
    storageClass: ~
    # Priority class of the restore test pods.
    # This should be less than any default priority class of the cluster, and
    # less than `global.priorityClass`.
    priorityClass: ~
    # Metadata volume settings. This volume is used to store metadata
    # (not restored files) during restore testing.
    metadataVolume:
      # Note: Suffixing with "B" here is obligatory.
      size: "1GiB"
    # Restore volume settings. This volume holds restored inodes as well as
    # some metadata during restore testing.
    restoreVolume:
      # The restore volume is used to store restored inodes as well as some
      # metadata (not restored files) during restore testing.
      # The size of the volume is defined using the formula:
      # `constant + dsmc_reported_size + (file_count * EFS) +
      # (dir_count * EDS).
      # EFS := "Extra File Size" and EDS := "Extra Directory Size".
      # Note: Suffixing with "B" here is obligatory.
      sizeConstant: "1GiB"
      extraFileSize: "1KiB"
      extraDirectorySize: "1KiB"

  postgres:
    storageClass: ~
    volumeSize: "20Gi"

  valkey:
    storageClass: ~
    volumeSize: "1Gi"

imageCredentials:
  registry: "ghcr.io"
  username: "your_github_username"
  password: "your_pat_token"


##################
## Dependencies ##
##################

docker-registry:
  fullnameOverride: registry
  nameOverride: registry

  # Default values for docker-registry.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.
  replicaCount: 1

  updateStrategy: { }
    # type: RollingUpdate
    # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0

  podAnnotations: { }
  podLabels: { }

  serviceAccount:
    create: false
    name: ""
    annotations: { }

  image:
    repository: registry
    tag: 2.8.3
    pullPolicy: IfNotPresent
    # imagePullSecrets:
    # - name: docker
  deployment: { }
  # annotations:
  service:
    name: registry
    type: NodePort
    # sessionAffinity: None
    # sessionAffinityConfig: {}
    # clusterIP:
    port: 5000
    nodePort: 30105
    # loadBalancerIP:
    # loadBalancerSourceRanges:
    annotations: { }
    # foo.io/bar: "true"
    labels: { }
    # foo.io/baz: "false"
  ingress:
    enabled: false
    className: nginx
    path: /
    # Used to create an Ingress record.
    hosts:
      - chart-example.local
    annotations: { }
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    labels: { }
    tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  resources: { }
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
  #  cpu: 100m
  #  memory: 128Mi
  persistence:
    accessMode: 'ReadWriteOnce'
    enabled: true
    size: 10Gi
    # storageClass: '-'

  # set the type of filesystem to use: filesystem, s3
  storage: filesystem

  # Set this to name of secret for tls certs
  # tlsSecretName: registry.docker.example.com
  secrets:
    haSharedSecret: ""
    htpasswd: ""
  # Secrets for Azure
  #   azure:
  #     accountName: ""
  #     accountKey: ""
  #     container: ""
  # Secrets for S3 access and secret keys
  # Use a secretRef with keys (accessKey, secretKey) for secrets stored outside the chart
  #   s3:
  #     secretRef: ""
  #     accessKey: ""
  #     secretKey: ""
  # Secrets for Swift username and password
  #   swift:
  #     username: ""
  #     password: ""

  # Options for s3 storage type:
  # s3:
  #  region: us-east-1
  #  regionEndpoint: https://s3.us-east-1.amazonaws.com
  #  bucket: my-bucket
  #  rootdirectory: /object/prefix
  #  encrypt: false
  #  secure: true

  # Options for swift storage type:
  # swift:
  #  authurl: http://swift.example.com/
  #  container: my-container

  # https://docs.docker.com/registry/recipes/mirror/
  proxy:
    enabled: false
    remoteurl: https://registry-1.docker.io
    username: ""
    password: ""
    # the ref for a secret stored outside of this chart
    # Keys: proxyUsername, proxyPassword
    secretRef: ""

  metrics:
    enabled: false
    port: 5001
    # Create a prometheus-operator servicemonitor
    serviceMonitor:
      enabled: false
      labels: { }
    # prometheus-operator PrometheusRule defining alerting rules for a Prometheus instance
    prometheusRule:
      enabled: false
      labels: { }
      rules: { }

  configData:
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [ nosniff ]
      debug:
        addr: :5001
        prometheus:
          enabled: false
          path: /metrics
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

  containerSecurityContext:
    enabled: true
    seLinuxOptions: { }
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsUser: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: [ ]
    supplementalGroups: [ ]
    fsGroup: 1000

  priorityClassName: ""

  podDisruptionBudget: { }
  # maxUnavailable: 1
  # minAvailable: 2

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 60 # available only on Kubernetes ≥1.23 [required "autoscaling/v2"]
    behavior: { } # available only on Kubernetes ≥1.23 [required "autoscaling/v2"]
  #   scaleDown:
  #     stabilizationWindowSeconds: 300
  #     policies:
  #     - type: Percent
  #       value: 100
  #       periodSeconds: 15
  #   scaleUp:
  #     stabilizationWindowSeconds: 0
  #     policies:
  #     - type: Percent
  #       value: 100
  #       periodSeconds: 15
  #     - type: Pods
  #       value: 4
  #       periodSeconds: 15
  #     selectPolicy: Max

  nodeSelector: { }

  affinity: { }

  tolerations: [ ]

  extraVolumeMounts: [ ]
  ## Additional volumeMounts to the registry container.
  #  - mountPath: /secret-data
  #    name: cloudfront-pem-secret
  #    readOnly: true

  extraVolumes: [ ]
  ## Additional volumes to the pod.
  #  - name: cloudfront-pem-secret
  #    secret:
  #      secretName: cloudfront-credentials
  #      items:
  #        - key: cloudfront.pem
  #          path: cloudfront.pem
  #          mode: 511

  extraEnvVars: [ ]
  ## Additional ENV variables to set
  # - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
  #   value: "/var/lib/example"

  initContainers: [ ]
  ## Init containers to add to the Deployment
  # - name: init
  #   image: busybox
  #   command: []

  garbageCollect:
    enabled: false
    deleteUntagged: true
    schedule: "0 1 * * *"
    resources: { }
